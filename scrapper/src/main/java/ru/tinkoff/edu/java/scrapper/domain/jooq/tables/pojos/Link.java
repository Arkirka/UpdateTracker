/*
 * This file is generated by jOOQ.
 */
package ru.tinkoff.edu.java.scrapper.domain.jooq.tables.pojos;


import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;
import java.io.Serializable;
import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Link implements Serializable {

    private static final long serialVersionUID = 1L;

    private Integer id;
    private String link;
    private Long chatId;
    private String lastUpdatedId;
    private LocalDateTime lastChecked;
    private String linkType;

    public Link() {}

    public Link(Link value) {
        this.id = value.id;
        this.link = value.link;
        this.chatId = value.chatId;
        this.lastUpdatedId = value.lastUpdatedId;
        this.lastChecked = value.lastChecked;
        this.linkType = value.linkType;
    }

    @ConstructorProperties({ "id", "link", "chatId", "lastUpdatedId", "lastChecked", "linkType" })
    public Link(
        @NotNull Integer id,
        @NotNull String link,
        @NotNull Long chatId,
        @Nullable String lastUpdatedId,
        @Nullable LocalDateTime lastChecked,
        @Nullable String linkType
    ) {
        this.id = id;
        this.link = link;
        this.chatId = chatId;
        this.lastUpdatedId = lastUpdatedId;
        this.lastChecked = lastChecked;
        this.linkType = linkType;
    }

    /**
     * Getter for <code>LINK.ID</code>.
     */
    @NotNull
    public Integer getId() {
        return this.id;
    }

    /**
     * Setter for <code>LINK.ID</code>.
     */
    public void setId(@NotNull Integer id) {
        this.id = id;
    }

    /**
     * Getter for <code>LINK.LINK</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 255)
    @NotNull
    public String getLink() {
        return this.link;
    }

    /**
     * Setter for <code>LINK.LINK</code>.
     */
    public void setLink(@NotNull String link) {
        this.link = link;
    }

    /**
     * Getter for <code>LINK.CHAT_ID</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getChatId() {
        return this.chatId;
    }

    /**
     * Setter for <code>LINK.CHAT_ID</code>.
     */
    public void setChatId(@NotNull Long chatId) {
        this.chatId = chatId;
    }

    /**
     * Getter for <code>LINK.LAST_UPDATED_ID</code>.
     */
    @Size(max = 15)
    @Nullable
    public String getLastUpdatedId() {
        return this.lastUpdatedId;
    }

    /**
     * Setter for <code>LINK.LAST_UPDATED_ID</code>.
     */
    public void setLastUpdatedId(@Nullable String lastUpdatedId) {
        this.lastUpdatedId = lastUpdatedId;
    }

    /**
     * Getter for <code>LINK.LAST_CHECKED</code>.
     */
    @Nullable
    public LocalDateTime getLastChecked() {
        return this.lastChecked;
    }

    /**
     * Setter for <code>LINK.LAST_CHECKED</code>.
     */
    public void setLastChecked(@Nullable LocalDateTime lastChecked) {
        this.lastChecked = lastChecked;
    }

    /**
     * Getter for <code>LINK.LINK_TYPE</code>.
     */
    @Size(max = 20)
    @Nullable
    public String getLinkType() {
        return this.linkType;
    }

    /**
     * Setter for <code>LINK.LINK_TYPE</code>.
     */
    public void setLinkType(@Nullable String linkType) {
        this.linkType = linkType;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Link other = (Link) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.link == null) {
            if (other.link != null)
                return false;
        }
        else if (!this.link.equals(other.link))
            return false;
        if (this.chatId == null) {
            if (other.chatId != null)
                return false;
        }
        else if (!this.chatId.equals(other.chatId))
            return false;
        if (this.lastUpdatedId == null) {
            if (other.lastUpdatedId != null)
                return false;
        }
        else if (!this.lastUpdatedId.equals(other.lastUpdatedId))
            return false;
        if (this.lastChecked == null) {
            if (other.lastChecked != null)
                return false;
        }
        else if (!this.lastChecked.equals(other.lastChecked))
            return false;
        if (this.linkType == null) {
            if (other.linkType != null)
                return false;
        }
        else if (!this.linkType.equals(other.linkType))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.link == null) ? 0 : this.link.hashCode());
        result = prime * result + ((this.chatId == null) ? 0 : this.chatId.hashCode());
        result = prime * result + ((this.lastUpdatedId == null) ? 0 : this.lastUpdatedId.hashCode());
        result = prime * result + ((this.lastChecked == null) ? 0 : this.lastChecked.hashCode());
        result = prime * result + ((this.linkType == null) ? 0 : this.linkType.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Link (");

        sb.append(id);
        sb.append(", ").append(link);
        sb.append(", ").append(chatId);
        sb.append(", ").append(lastUpdatedId);
        sb.append(", ").append(lastChecked);
        sb.append(", ").append(linkType);

        sb.append(")");
        return sb.toString();
    }
}
